LoadFunctionLibrary("libv3/all-terms.bf"); 
LoadFunctionLibrary("libv3/UtilityFunctions.bf");
LoadFunctionLibrary("libv3/models/parameters.bf");
LoadFunctionLibrary("libv3/convenience/random.bf");

global simulator.site.alpha = 1;
global simulator.site.omega = 1;

lfunction simulator.prepare_site_distribution (model, site_count, tree, tree_info) {
 
    rates = (model[^"terms.parameters"])[^"terms.local"];
    
    for (_node_; in ; ^tree) {
         parameters.SetConstraint ("`tree`."+ _node_ + ".`rates[^'terms.parameters.nonsynonymous_rate']`",
                                    "simulator.site.omega*`tree`."+ _node_ + ".`rates[^'terms.parameters.synonymous_rate']`", "");
         parameters.SetConstraint ("`tree`."+ _node_ + ".`rates[^'terms.parameters.synonymous_rate']`",
                                    "simulator.site.alpha*`tree`."+ _node_ + ".`rates[^'terms.parameters.synonymous_rate']`__", "");
    }
    
    
    KeywordArgument   ("gdd-distribution", "Comma separated gdd rates: rate,weight,rate,weight...", None);            
    rates = io.PromptUserForString ("Comma separated gdd rates: rate,weight,rate,weight...");

    rates = Eval ("{{" +  rates + "}}");
    rate_count = utility.Array1D (rates) $ 2;
    if (rate_count > 1 && rate_count $ 1 == rate_count) {
        rate_distro = {rate_count,2};
        sum = 0;
        for (c = 0; c < rate_count; c+=1) {
            rate_distro[c][0] = rates[c*2];
            sum += rates[c*2+1];
        }
        for (c = 0; c < rate_count; c+=1) {
            rate_distro[c][1] = rates[c*2+1]/sum;
        }
          
    } else {
        io.ReportAnExecutionError ("Incorrect dimensions for rate distribution (must have an even number of entries with at least 4)"); 
    }
    
    site_profile = {site_count, 2};
    
    for (i = 0; i < site_count; i+=1) {
          uni = Random (0,1);
          sum = 0;
          for (j = 0; j < rate_count; j+=1) {
            sum += rate_distro[j][1];
            if (sum >= uni) {
                site_profile[i][0] = 1;  
                site_profile[i][1] = rate_distro[j][0];
                break;
            }
          }
    }
     
    return site_profile;  
    
} 

lfunction simulator.apply_site_distribution (model, site, tree) {
    site = Eval (site);
    ^"simulator.site.alpha" = site[0];
    ^"simulator.site.omega" = site[1];
    
}

lfunction simulator.set_site_omega (model, site_id, branch_info) {
/**
    no site-to-site rate variation
*/

    mx = {{1,1}};
    mx [0] = (^"simulator.site_profile")[site_id][0];
    mx [1] = (^"simulator.site_profile")[site_id][1];
    return mx;
    
}