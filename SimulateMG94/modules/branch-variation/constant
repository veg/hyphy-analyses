LoadFunctionLibrary("libv3/all-terms.bf"); 
LoadFunctionLibrary("libv3/UtilityFunctions.bf");
LoadFunctionLibrary("libv3/models/parameters.bf");

KeywordArgument   ("omega", "The constant dN/dS ratio to apply across the tree", "1");
simulator.omega = "" + io.PromptUser ("Tree-wide dN/dS ratio", 0.5, 0, 1e3, FALSE);

lfunction simulator.set_branch_rates (model, tree_id, branch_id, branch_info) {
    /** apply the same dN/dS to all branches */
    rates = (model[^"terms.parameters"])[^"terms.local"];
    parameters.SetConstraint ("`tree_id`.`branch_id`.`rates[^'terms.parameters.nonsynonymous_rate']`", 
                              "`^'simulator.omega'`*`tree_id`.`branch_id`.`rates[^'terms.parameters.synonymous_rate']`", "");
                              
                        
    estimators.applyBranchLength (tree_id, branch_id, model, branch_info[^"terms.branch_length"]);    
}

lfunction simulator.validate_tree (tree) {
    if (trees.HasBranchLengths (tree)) {
        return '';
    }
    return 'The input tree must have input branch lengths';
}
