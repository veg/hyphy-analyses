LoadFunctionLibrary("libv3/all-terms.bf"); 
LoadFunctionLibrary("libv3/UtilityFunctions.bf");
LoadFunctionLibrary("libv3/models/parameters.bf");


KeywordArgument   ("omega", "The constant dN/dS ratio to apply across the tree", "1");
simulator.omega     = "" + io.PromptUser ("Tree-wide dN/dS ratio", 0.5, 0, 1e3, FALSE);
simulator.mss_rates = {};
simulator.mss_neutral_rate = "xx";

simulator.has_nn = simulator.model[utility.getGlobalValue("terms.model.MSS.neutral")];

if (Abs (simulator.has_nn) == 0 ) {

    KeywordArgument  ("mss-reference-rate", "The reference rate (set to 1)");
    mss.options = model.GetLocalParameters_RegExp (simulator.model, "codon class");
    
    console.log (mss.options);
    
    simulator.model[utility.getGlobalValue("terms.model.MSS.neutral")]  = io.SelectAnOption (mss.options, "The reference rate (set to 1)");
    //console.log (simulator.model[utility.getGlobalValue("terms.model.MSS.neutral")] );
}


for (d,p; in; model.GetLocalParameters_RegExp (simulator.model, "codon class")) {
    simulator.class = d;
    //simulator.class =  simulator.class[Abs( simulator.class) - 1];
    if ((simulator.class $ simulator.model[utility.getGlobalValue("terms.model.MSS.neutral")])[0] >= 0) {
        simulator.mss_neutral_rate = p;
    } else {
         KeywordArgument   ("mss-" + p, "Relative synonymous rate for `d`", 1.0);   
         sim.mss_rate = io.PromptUser ("Relative synonymous rate for `d`", 0.5, 0, 1e3, FALSE);
         simulator.mss_rates [p] = sim.mss_rate;
    }
}


simulator.report = {
    terms.parameters.omega_ratio : simulator.omega,
    "mss" : simulator.mss_rates,
    terms.model.MSS.neutral : utility.getGlobalValue("terms.model.MSS.neutral")
};


lfunction simulator.set_branch_rates (model, tree_id, branch_id, branch_info) {
    /** apply the same dN/dS to all branches */
    rates = (model[^"terms.parameters"])[^"terms.local"];
    parameters.SetConstraint ("`tree_id`.`branch_id`.`rates[^'terms.parameters.nonsynonymous_rate']`", 
                              "`^'simulator.omega'`*`tree_id`.`branch_id`.`^'simulator.mss_neutral_rate'`", "");
         
    for (p, r; in; ^'simulator.mss_rates') {
        parameters.SetConstraint ("`tree_id`.`branch_id`.`p`", "" + r + "*`tree_id`.`branch_id`.`^'simulator.mss_neutral_rate'`", "");
    }                     
                
    estimators.applyBranchLength (tree_id, branch_id, model, branch_info[^"terms.branch_length"]);    
    /*console.log ("\n\n");
    console.log (branch_info[^"terms.branch_length"]);
    for (k; in; rates) {
        var = "`tree_id`.`branch_id`.`k`";
        console.log (var);
        console.log (^var);
    }*/
}

lfunction simulator.validate_tree (tree) {
    if (trees.HasBranchLengths (tree)) {
        return '';
    }
    return 'The input tree must have input branch lengths';
}
