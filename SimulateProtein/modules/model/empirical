LoadFunctionLibrary("libv3/all-terms.bf");
LoadFunctionLibrary("libv3/UtilityFunctions.bf");
LoadFunctionLibrary("libv3/models/parameters.bf");
LoadFunctionLibrary("libv3/models/protein/empirical.bf");


KeywordArgument ("model-matrix",       "Which empirical rate matrix should be used");

simulator.model_option = io.SelectAnOption (models.protein.empirical.default_generators, "Select the empirical model");

//simulator.model_option  (models.protein.empirical.default_generators[simulator.model_option] );

//----------------------------------------------------------------------------------------

lfunction simulator.define_model.frequencies (type) {
    if (^"simulator.efv" == "empirical") {
         model = Call ((^"models.protein.empirical.default_generators")[^"simulator.model_option"], type);
    } else {
         model = Call ((^"models.protein.empirical.plusF_generators")[^"simulator.model_option"], type);
         model [^"terms.efv_estimate"] = ^"simulator.efv";   
    }
    return model;
}

function simulator.define_model () {
    return model.generic.DefineModel ("simulator.define_model.frequencies" ,
                                                  "simulator.substitution_model",
                                                  {"0" : parameters.Quote(terms.local)},
                                                  null,
                                                  null);
}
