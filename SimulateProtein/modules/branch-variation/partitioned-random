LoadFunctionLibrary("libv3/all-terms.bf"); 
LoadFunctionLibrary("libv3/UtilityFunctions.bf");
LoadFunctionLibrary("libv3/models/parameters.bf");
LoadFunctionLibrary("libv3/convenience/random.bf");

simulator.rates = {};

KeywordArgument   ("rate-distribution", "The distribution to use for modifying relative evolutionary rates", "Gamma");

simulator.distribution_option = io.SelectAnOption ({
    "Gamma" : "Gamma (mean 1)",
    "Normal" : "Normal (mean 1)",
    "Exponential" : "Exponential (mean 1)"
}, "Select the distribution to sample from");

if (simulator.distribution_option == "Exponential") {
    function simulator.sampler () {
        return random.exponential  (1);
    }
} else {
    if (simulator.distribution_option == "Normal") {
        KeywordArgument   ("variance", "Variance for the normal distribution", "1.");
        simulator.variance = Sqrt (io.PromptUser ("Variance for the normal distribution", 1.0, 0.00, 10, FALSE));
    
        function simulator.sampler () {
            return Max (1e-6, 1 + random.normal.standard  (1) * simulator.variance);
        }
    } else {
        function simulator.sampler () {
            return random.gamma_fast (1);
        }
    }
}


lfunction simulator.set_branch_rates (model, tree_id, branch_id, branch_info) {
    /** apply the same dN/dS to all branches */
    scaler = simulator.sampler ();
    (^"simulator.rates")[branch_id] = scaler;
    my_rate = (+(^'simulator.rates')[branch_info[^'terms.trees.model_map']]) * scaler;;
    estimators.applyBranchLength (tree_id, branch_id, model, my_rate * (+branch_info[^"terms.branch_length"]));
    
}

lfunction simulator.validate_tree (tree) {
    if (trees.HasBranchLengths (tree)) {   
        classes = utility.UniqueValues (tree[^"terms.trees.model_map"]);
        for (_value_; in; classes) {
            if (_value_ == "") {
                    label = "Unlabeled";
            } else {
                label = _value_;
            }
            KeywordArgument   ("rate-" + label, "The relative rate to apply to branches `label`", "1.");
            (^"simulator.rates")[_value_] = "" + io.PromptUser ("The relative rate to apply to branches " + label, 1.0, 0, 1e3, FALSE);
        }
        return '';
    }
    
    return 'The input tree must have input branch lengths';
}